<actions>
  <!-- call it with 
     xidel --template-file reddit-transpassing.xml 
  put your API keys in reddit-transpassing.keys.xml
  -->
  <action>  
    <s> keys := doc("reddit-transpassing.keys.xml")/keys,
        CACHEDIR := "transpassing/cache/"</s>    
    <s> declare function local:gender-to-number($gender) {
      switch ($gender) 
        case "male" return -1
        case "female" return +1
        default return error(QName("xxx"), "unknown gender: " || $gender)
    };  
    declare function local:assert($cond, $message) {
      if ($cond) then () else error(QName("xxx"), $message)
    };
    (:
      This bot uses a "talking database" of possible phrases
      
      The talking database is stored in a minimized form as JSON object:
        * "string" -> string
        * ["a", "b", "c"] -> randomly choosen a, b, or c
        * {"concat": (a,b,c,...)} -> *a || *b || *c ...
        * {"condition": "test", "concat": value}  *value, if test or () otherwise
    :)
    (: Generates the talking database from an expression like ((Get|Bring) the ((a|b) x|c)) :)
    declare function local:split-talkings($pattern){
      local:split-talkings-rec($pattern, 0)
    };  
    declare function local:split-talkings-rec($pattern, $deep){
      if (not(contains($pattern, "("))) then 
        let $options := tokenize($pattern, "[|]") 
        return if (count($options) > 1) then [$options] else $options
      else 
        let $marker := "##" || $deep,
            $splitted := extract($pattern, "(.*)[(]([^()]+)[)](.*)", (1,2,3)),
            $inner := local:split-talkings-rec($splitted[2], $deep),
            $outer := local:split-talkings-rec($splitted[1] || $marker || $splitted[3], $deep + 1)
        return local:apply-marker($outer, $marker, $inner)
    };
    declare function local:apply-marker($v, $marker, $inner){
      (: Replaces every $marker in a string of $v with $inner
        trace( $marker || " => " || serialize-json($inner) || " in " || serialize-json($v) , "apply")[0],
       :)
      
       if (count($v) > 1) then $v ! local:apply-marker(., $marker, $inner)
       else typeswitch($v) 
         case xs:string return
           if (not(contains($v, $marker))) then $v
           else let $concat := tail (tokenize($v, $marker) ! ( $inner, . ) ) [.] 
           return if (count($concat) > 1) then {"concat": $concat} else $concat
         case object() return 
           let $concat := one-or-more($v("concat")) ! local:apply-marker(., $marker, $inner) !
              (typeswitch(.) 
                 case xs:string return .
                 case object() return one-or-more(.("concat"))
                 case array() return .
                 default return error(QName("xxx"), "unexpected: " || .) ) [.]
           return if (count($concat) > 1) then {"concat": $concat} else $concat
          case array() return [ $v() ! local:apply-marker(., $marker, $inner) ]
          default return error(QName("xxx"), "unexpected 2: " || $v)
    };
    (: Moves conditions {$x}  from the strings to the condition properties :)
    declare function local:extract-conditions($v) {
      $v ! typeswitch(.) 
         case xs:string return
           if (not(contains(., "{"))) then .
           else let $split := extract(., "([^{]*)[{]([^{}]+)[}](.*)", (1,2,3)),
                    $rest := local:extract-conditions($split[3])
           return if ($rest instance of xs:string) then
                {"condition": $split[2], "concat":  $split[1]|| $rest  }
           else {"condition": $split[2], "concat": ($split[1],  $rest) }
         case object() return {"concat": one-or-more(.("concat")) ! local:extract-conditions(.)}
         case array() return [ .() ! local:extract-conditions(.) ]
         default return error(QName("xxx"), "unexpected 2: " || $v)
    };
    declare function local:merge-objects($v) {
      (: merges {"condition": A, "concat": B, { "condition": C, "concat": D } } to
                {"condition": A, C, "concat": B, D } 
       :)
      $v ! typeswitch(.) 
         case xs:string return .
         case object() return 
           if (empty(.("concat"))) then .
           else let $concat := .("concat") ! local:merge-objects(.),
                    $objects := $concat [. instance of object()],
                    $conditions := (.("condition"), $objects("condition")),
                    $concats := if (empty($objects)) then $concat else $concat ! 
                      (if (. instance of object()) then .("concat") else .)
           return {|
             if (exists($concats)) then { "concat": $concats } else (),
             if (exists($conditions)) then { "condition": $conditions } else ()
           |}
         case array() return [ .() ! local:merge-objects(.) ]
         default return error(QName("xxx"), "unexpected in merge: " || $v)
    };
    (: Removes all entries from the talking database that have a not satisfied condition  :)
    declare function local:filter-truths($v){
      $v ! typeswitch(.) 
         case xs:string return .
         case object() return 
           . [ every $condition in .("condition") satisfies eval($condition) ] !
           ( if (exists(.("concat"))) then {"concat": .("concat") ! local:filter-truths(.) } else () )
         case array() return [ .() ! local:filter-truths(.) ]
         default return error(QName("xxx"), "unexpected in merge: " || $v)
    };
    declare function local:product($v) {
      switch (count($v)) 
        case 0 return 1
        case 1 return $v
        default return head($v) * local:product(tail($v))
    };
    (: Counts how many entries the talking database contains :)
    declare function local:count-talkings($v){
      exactly-one($v) ! typeswitch(.) 
         case xs:string return 1
         case object() return local:product( .("concat") ! local:count-talkings(.) )
         case array() return sum ( .() ! local:count-talkings(.) )
         default return error(QName("xxx"), "unexpected in merge: " || $v)
    };
    declare function local:choose-talking-from-object-concats($concats, $i){
      switch (count($concats))
        case 0 return ""
        case 1 return local:choose-talking($concats, $i)
        default return let $f := local:count-talkings(head($concats)) return
          local:choose-talking( head($concats), ($i mod $f) ) 
          || local:choose-talking-from-object-concats(tail($concats), $i idiv $f)
    };
    declare function local:choose-talking-from-alternatives($list, $i){
      switch (count($list))
        case 0 return ""
        case 1 return local:choose-talking($list, $i)
        default return let $c := local:count-talkings(head($list)) return
          if ($c > $i) then local:choose-talking(head($list), $i)
          else local:choose-talking-from-alternatives(tail($list), $i - $c)
    };
    (: Chooses the $i-th entry in the talking database :)
    declare function local:choose-talking($v, $i){
      exactly-one($v) ! typeswitch(.) 
         case xs:string return if ($i eq 0) then . else ""
         case object() return local:choose-talking-from-object-concats(.("concat"), $i)
         case array() return local:choose-talking-from-alternatives(.(), $i)
         default return error(QName("xxx"), "unexpected in merge: " || $v)
    };
    
    
    declare variable $talkings := local:merge-objects(local:extract-conditions(local:split-talkings(normalize-space(
      "(I (see|recognize you as) a|You (seem|appear) to be a|You (look|appear) like a) 
         $age years (old|young{$age le 30}) 
         ((male|man{$age gt 16}|boy{$age lt 25}){$gender lt 0}|
               (female|woman{$age gt 16}|girl{$age lt 25}){$gender gt 0})
      "))));
      trace(serialize-json($talkings),$line-ending|| " talkings"),
      ()
    </s>

    <s>age := 60, gender := -1, 
      $curtalkings := local:filter-truths($talkings),
      trace(serialize-json($curtalkings),$line-ending|| " talkings"),
      trace(local:count-talkings($curtalkings), "count"),
      trace(local:choose-talking($curtalkings, 0), "firsr"),
      for $i in (0 to local:count-talkings($curtalkings)) return
        trace(local:choose-talking($curtalkings, $i), $i||"-th"),
      ()
    </s>        
    <!-- %certain-age  
    
    
    (between) 10 to 30 years old 
    
   (Probably | Tending towards | Likely | More) male. Not sure | Hard to say 
    -->
    <s>
    </s>
        
    
    <s> file:create-dir($CACHEDIR || "skybiometry"), file:create-dir($CACHEDIR || "oxfort")</s>

    <call action="tests"/>
 
 
    <call action="detect"/>
  </action>
  
  <action>
    
    <s> if (empty(get("user", ()))) then $user := (trace((), "Username: "), read()) else () </s>
    <s> if (empty(get("passwd", ()))) then $passwd := (trace((), "Password: "), read()) else () </s>
 
    <page url="https://www.reddit.com/api/login">
      <post name="user" value="{$user}"/>
      <post name="passwd" value="{$passwd}"/>
      <post name="api_type" value="json"/>
    </page>    
    
    <page url="https://www.reddit.com/api/me.json">
      <template><t:s>modhash := jn:parse-json($raw)//modhash</t:s></template>
    </page>
        
    <loop test="true()">
      <page url="https://www.reddit.com/message/unread.json">
        <template><t:s>letters := jn:parse-json($raw)/data/children/data</t:s></template>
      </page>
<!--    <s>letters := ("/u/butler bring soda")</s>-->
    <!--<loop var="rep" list="1 to 10">-->
    <loop var="letter" list="$letters">
      <s> declare variable $rand-seed := seconds-from-time(current-time()) mod 7;
             declare function rand-text($list) { let $i := floor((random()+$rand-seed)*count($list)) mod count($list) + 1 return $list[$i] };
             declare function is-plural($word) { if (ends-with($word, "s")) then true() else false() };
         trace($letter/body, "letter: "), 
         $bring := extract($letter/body, "(bring|get)\s*(me)?\s*(my|the|an?)?\s*([^,.:;!?\n]+)",4),
         $response := if ($bring) then "[*" ||
           replace(rand-text(("Enjoy your %!",
             if (is-plural($bring)) then ("Here are your %!")
             else ("Here is your %!")
           )), "%", $bring) || "*](/robobutler-in)"
         else (),
         trace($response,"===> response")        
      </s>
      
      <page test="$response" url="https://www.reddit.com/api/comment.json">
        <header name="X-Modhash" value="{$modhash}"/>
        <post name="api_type" value="json"/>
        <post name="text" value="{$response}"/>
        <post name="thing_id" value="{$letter/name}"/>
      </page>
      
    </loop>
    
    <page test="exists($letters)" url="https://www.reddit.com/api/read_message">
      <header name="X-Modhash" value="{$modhash}"/>
      <post name="id" value="{join($letters/name, ',')}"/>
    </page>
    
    <s>sleep(1000*60*5)</s>
    </loop>
    
  </action>
  
  <action id="detect">
    <s> genders := (), ages := (), multi-faces := false() </s>
    <s> api := "oxfort" </s> <call action="detect-cached"/>
    <s> api := "skybiometry" </s> <call action="detect-cached"/>
    <s>trace($genders, "genders: "), trace($ages, "ages: ")</s>
  </action>  
  
  <action id="detect-cached"> 
    <s>cache-file := $CACHEDIR || $api || "/" || uri-encode($imgurl)</s>
    <if test="file:exists($cache-file)">
      <s>$out := jn:parse-json(file:read-text($cache-file))</s>
    </if>
    <else>
      <call action="{$api}"/>
      <s>file:write-text($cache-file, serialize-json($out))</s>
    </else>
    <s>
    $genders := ($genders, $out("genders")),
    $ages := ($ages, $out("ages")),
    $multi-faces := $multi-faces or $out("multi-faces")
    </s>
  </action>

  <action id="skybiometry"> 
    <page url="http://api.skybiometry.com/fc/faces/detect.json?api_key={$keys/skybiometry/key}&api_secret={$keys/skybiometry/secret}&urls={uri-encode($imgurl)}&detector=aggressive&attributes=gender,age"/>
    <s>let $attributes := json($raw).photos().tags().attributes
	       return $out := {
  	       "genders": ($attributes).gender ! { 
	           "value": local:gender-to-number((.).value),
	           "confidence": (.).confidence div 100 },	          
	         "ages": ($attributes).age_est ! {
	           "value": (.).value,
	            "confidence": (.).confidence div 100
	          }, 
	         "multi-faces": count($attributes) > 1 
         }    
    </s>
  </action>
 
  <action id="oxfort"> 
    <page url="https://api.projectoxford.ai/face/v1.0/detect?returnFaceAttributes=age,gender">
      <header name="Ocp-Apim-Subscription-Key" value="{$keys/oxfort}"/>
      <header>Content-Type: application/json; charset=utf-8</header>
      <header>Accept: application/json</header>
      <method>POST</method>
      <post>{{ "url": "{($imgurl)}" }}</post>
    </page>
    <s>let $attributes := json(trace($raw, "result"))().faceAttributes
	       return $out := {
	         "genders": ($attributes).gender ! { 
		           "value": local:gender-to-number(.), 
		           "confidence": 0.5
	           } ,
	         "ages": ($attributes).age ! {
	             "value": round(.) , 
	             "confidence": 0.5
	             }, 
           "multi-faces": count($attributes) > 1 
         }
    
    </s>
  </action>
 
  
<!--  <action id="lambda">  does not gender, despite saying so in the example
    <page url="https://lambda-face-recognition.p.mashape.com/detect">
      <header name="X-Mashape-Key" value="{trace($keys/mashape, 'key')}"/>
      <header name="Accept" value="application/json"/>
      <post name="urls" value="{$imgurl}"/>
    </page>
    <s>trace($raw, "abc") </s>
  </action>
-->
   <!-- 
  <action id="face++">fails to open imgur links 
    <page url="https://faceplusplus-faceplusplus.p.mashape.com/detection/detect?attribute=gender%2Cage&url={uri-encode($imgurl)}">
      <header name="X-Mashape-Key" value="{trace($keys/mashape, 'key')}"/>
      <header name="Accept" value="application/json"/>
    </page>
  </action>-->
  
  <action id="tests">
      trace(serialize-json(local:split-talkings("foobar")),$line-ending|| " talkings2"),
      trace(serialize-json(local:split-talkings("")),$line-ending|| " talkings2"),
      trace(serialize-json(local:split-talkings("(x)")),$line-ending|| " talkings2"),
      trace(serialize-json(local:split-talkings("")),$line-ending|| " talkings2"),
      trace(serialize-json(),$line-ending|| " talkings2"),
      trace(serialize-json(local:split-talkings("")),$line-ending|| " talkings2"),
      trace(serialize-json(local:split-talkings("")),$line-ending|| " talkings2"),
    <s> for $test in ( 
		  ["foobar", "foobar", 1],
		  ["foo|bar", ["foo", "bar"], 2],
		  ["(x)", "x", 1],
		  ["((x))", "x", 1],
		  ["a(b)c", {"concat": ["a", "b", "c"]}, 1],
		  ["a(b)c(e)f", {"concat": ["a", "b", "c", "e", "f"]}, 1],
		  ["a(b)c(e|f|g)h", {"concat": ["a", "b", "c", ["e", "f", "g"], "h"]}, 3],
		  ["a((b))c", {"concat": ["a", "b", "c"]}, 1], 
		  ["a(b|c)d(e|f)|x", [{"concat": ["a", ["b", "c"], "d", ["e", "f"]]}, "x"], 5] 
		  ) 
		  let $talk := local:split-talkings($test(1))
  return
    if (serialize-json($talk) ne serialize-json($test(2))) then
      error(QName("xxx"), "test fail: " || $test(1) || " got " || serialize-json($talk))
    else if (local:count-talkings($talk) ne $test(3)) then
      error(QName("xxx"), "count test fail: " || $test(1) || " got " || local:count-talkings($talk))
    else ("ok")
    </s>
  </action>
</actions>
