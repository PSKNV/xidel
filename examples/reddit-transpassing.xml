<actions>
  <!-- call it with 
     xidel --template-file reddit-transpassing.xml 
  put your API keys in reddit-transpassing.keys.xml
  -->
  <action>  
    <s> keys := doc("reddit-transpassing.keys.xml")/keys,
        CACHEDIR := "transpassing/cache/"</s>    
    <s> 
    declare function local:assert($cond, $message) {
      if ($cond) then () else error(QName("xxx"), $message)
    };
    declare function local:product($v) {
      switch (count($v)) 
        case 0 return 1
        case 1 return $v
        default return head($v) * local:product(tail($v))
    };
    declare function local:json-to-sequence($v) {
      typeswitch ($v) 
        case array() return $v() ! local:json-to-sequence(.)
        case object() return {| for $key in $v() return {$key: local:json-to-sequence($v($key))} |}
        case null return ()
        default return $v
    };
    declare variable $rand-seed := seconds-from-time(current-time()) mod 7;
    declare function local:random-to($count) {
      floor((random()+$rand-seed)*$count) mod $count
    };
    declare function local:replaces-rec($sentence, $replaces, $i) {
      if ($i >= count($replaces)) then $sentence
      else local:replaces-rec(replace($sentence, $replaces[$i], $replaces[$i+1]), $replaces, $i + 2)
    };
    declare function local:replaces($sentence, $replaces) {
      local:replaces-rec($sentence, $replaces, 1)
    };
    (:
      This bot uses a "talking database" of possible phrases
      
      The talking database is stored in a minimized form as JSON object:
        * "string" -> string
        * ["a", "b", "c"] -> randomly choosen a, b, or c
        * {"concat": (a,b,c,...)} -> *a || *b || *c ...
        * {"condition": "test", "concat": value}  *value, if test or () otherwise
    :)
    (: Generates the talking database from an expression like {{Get|Bring} the {{a|b} x|c}} :)
    declare function local:create-talkings($pattern){
      let $safepattern := replace(normalize-space($pattern), "[{][?]([^}]+)[}]", "⦃$1⦄" )
      return local:merge-objects(local:extract-conditions(local:split-talkings($safepattern)))
    };
    declare function local:split-talkings($pattern){
      local:split-talkings-rec($pattern, 0)
    };  
    declare function local:split-talkings-rec($pattern, $deep){
      if (not(contains($pattern, "{"))) then 
        let $options := tokenize($pattern, "[|]") 
        return if (count($options) > 1) then [$options] else $options
      else 
        let $marker := "##" || $deep,
            $splitted := extract($pattern, "(.*)[{]([^{}]+)[}](.*)", (1,2,3)),
            $inner := local:split-talkings-rec($splitted[2], $deep),
            $outer := local:split-talkings-rec($splitted[1] || $marker || $splitted[3], $deep + 1)
        return local:apply-marker($outer, $marker, $inner)
    };
    declare function local:apply-marker($v, $marker, $inner){
      (: Replaces every $marker in a string of $v with $inner
        trace( $marker || " => " || serialize-json($inner) || " in " || serialize-json($v) , "apply")[0],
       :)
      
       if (count($v) > 1) then $v ! local:apply-marker(., $marker, $inner)
       else typeswitch($v) 
         case xs:string return
           if (not(contains($v, $marker))) then $v
           else let $concat := tail (tokenize($v, $marker) ! ( $inner, . ) ) [.] 
           return if (count($concat) > 1) then {"concat": $concat} else $concat
         case object() return 
           let $concat := one-or-more($v("concat")) ! local:apply-marker(., $marker, $inner) !
              (typeswitch(.) 
                 case xs:string return .
                 case object() return one-or-more(.("concat"))
                 case array() return .
                 default return error(QName("xxx"), "unexpected: " || .) ) [.]
           return if (count($concat) > 1) then {"concat": $concat} else $concat
          case array() return [ $v() ! local:apply-marker(., $marker, $inner) ]
          default return error(QName("xxx"), "unexpected 2: " || $v)
    };
    (: Moves conditions  ⦃$x⦄   from the strings to the condition properties :)
    declare function local:extract-conditions($v) {
      $v ! typeswitch(.) 
         case xs:string return
           if (not(contains(., "⦃"))) then .
           else let $split1 := substring-before(., "⦃"), $split1b := substring-after(., "⦃"),
                    $split2 := substring-before($split1b, "⦄"), 
                    $split3 := substring-after($split1b, "⦄"),
           (:extract(., "([^⦃]*)⦃([^⦃⦄]+)⦄(.*)", (1,2,3)),:)
                    $rest := local:extract-conditions($split3)
           return if ($rest instance of xs:string) then
                {"condition": $split2, "concat":  $split1|| $rest  }
           else {"condition": $split2, "concat": ($split1,  $rest) }
         case object() return {"concat": one-or-more(.("concat")) ! local:extract-conditions(.)}
         case array() return [ .() ! local:extract-conditions(.) ]
         default return error(QName("xxx"), "unexpected 2: " || $v)
    };
    declare function local:merge-objects($v) {
      (: merges {"condition": A, "concat": B, { "condition": C, "concat": D } } to
                {"condition": A, C, "concat": B, D } 
       :)
      $v ! typeswitch(.) 
         case xs:string return .
         case object() return 
           if (empty(.("concat"))) then .
           else let $concat := .("concat") ! local:merge-objects(.),
                    $objects := $concat [. instance of object()],
                    $conditions := (.("condition"), $objects("condition")),
                    $concats := if (empty($objects)) then $concat else $concat ! 
                      (if (. instance of object()) then .("concat") else .)
           return {|
             if (exists($concats)) then { "concat": $concats } else (),
             if (exists($conditions)) then { "condition": $conditions } else ()
           |}
         case array() return [ .() ! local:merge-objects(.) ]
         default return error(QName("xxx"), "unexpected in merge: " || $v)
    };
    (: Removes all entries from the talking database that have a not satisfied condition  :)
    declare function local:filter-truths($v){
      $v ! typeswitch(.) 
         case xs:string return .
         case object() return 
           . [ every $condition in .("condition") satisfies eval($condition) ] !
           ( if (exists(.("concat"))) then {"concat": .("concat") ! local:filter-truths(.) } else () )
         case array() return [ .() ! local:filter-truths(.) ]
         default return error(QName("xxx"), "unexpected in merge: " || $v)
    };
    (: Counts how many entries the talking database contains :)
    declare function local:count-talkings($v){
      exactly-one($v) ! typeswitch(.) 
         case xs:string return 1
         case object() return local:product( .("concat") ! local:count-talkings(.) )
         case array() return sum ( .() ! local:count-talkings(.) )
         default return error(QName("xxx"), "unexpected in merge: " || $v)
    };
    declare function local:choose-talking-from-object-concats($concats, $i){
      switch (count($concats))
        case 0 return ""
        case 1 return local:choose-talking($concats, $i)
        default return let $f := local:count-talkings(head($concats)) return
          local:choose-talking( head($concats), ($i mod $f) ) 
          || local:choose-talking-from-object-concats(tail($concats), $i idiv $f)
    };
    declare function local:choose-talking-from-alternatives($list, $i){
      switch (count($list))
        case 0 return ""
        case 1 return local:choose-talking($list, $i)
        default return let $c := local:count-talkings(head($list)) return
          if ($c > $i) then local:choose-talking(head($list), $i)
          else local:choose-talking-from-alternatives(tail($list), $i - $c)
    };
    (: Chooses the $i-th entry in the talking database :)
    declare function local:choose-talking($v, $i){
      exactly-one($v) ! typeswitch(.) 
         case xs:string return if ($i eq 0) then . else ""
         case object() return local:choose-talking-from-object-concats(.("concat"), $i)
         case array() return local:choose-talking-from-alternatives(.(), $i)
         default return error(QName("xxx"), "unexpected in merge: " || $v)
    };
    (: Chooses a random entry in the talking database :)
    declare function local:choose-random-talking($v){
      local:choose-talking($v, local:random-to(local:count-talkings($v)))
    };
    (: Chooses a random entry in the talking database :)
    declare function local:enumerate-talkings($v){
      for $i in 0 to local:count-talkings($v) - 1 return local:choose-talking($v, $i)
    };
    
    
    declare function local:gender-to-number($gender) {
          switch ($gender) 
            case "male" return -1
            case "female" return +1
            default return error(QName("xxx"), "unknown gender: " || $gender)
        };  
    declare function local:average-with-confidence($seq) {
      let $fallback-confidence := 0.5,
          $confidence := sum ( $seq ! (.("confidence"), $fallback-confidence)[1] )
      return if ($confidence le 0) then 0
      else sum ( $seq ! (  .("value") * (.("confidence"), $fallback-confidence) ) ) div $confidence
    };
    declare function local:quote($s) {
      $paragraph || ">" || $s || $paragraph
    };
    declare function local:set-globals($pic){
      $ages := $pic("ages"),
      $genders := $pic("genders"),
      $multi-faces := $pic("multi-faces"),
      
      $age-values := $ages ! .("value"), 
      $age := local:average-with-confidence($ages),
      $min-age := min($age-values),
      $max-age := max($age-values),
      $age-range := $max-age - $min-age + 1,
      
      $gender-values := $genders ! .("value"), 
      $gender := local:average-with-confidence($genders),
      $gender-queer := exists($gender-values[. lt 0]) and exists($gender-values[. gt 0]) (: APIs do not agree :)
    };
    declare function local:phrase($talk){
      replace(
         local:choose-random-talking(local:filter-truths($talk)),
         " +[.]", ".")
    };
    declare function local:phrase-age($talk){
      local:replaces(
         local:choose-random-talking(local:filter-truths($talk)),
         ("\$age", $age,
         "\$min-age", $min-age,
         "\$max-age", $max-age,
         " +[.]", "."))
    };
    declare function local:phrase-certainty($v){
      if (empty($v)) then ""
      else replace(
         local:choose-random-talking(local:filter-truths($talkings-certainty)),
       "\$certainty", $v)
    };
    declare function local:full-disclosure-table($faces){
      let $apis := distinct-values($faces//api)
      return 
        $paragraph || "Image|" || join($apis, "|") || $line-ending
        || join( (0 to count($apis)) ! ":--", "|") || $line-ending
        ||  
        join( for $local-picture in $faces return (
          x"[image]({$local-picture("url")}) | { join( $apis ! local:full-disclosure-single-api($local-picture, .), "|")}"
          )
        , $line-ending)  
    };
    declare function local:full-disclosure-single-api($picture, $api){
    let $lages := local:json-to-sequence($picture("ages"))[.("api") eq $api],
         $lgenders := local:json-to-sequence($picture("genders"))[.("api") eq $api]
     return 
        join( for $i in 1 to max((count($lages), count($lgenders))) 
          let $a := $lages[$i], $g := $lgenders[$i], 
              $aconf := $lages[$i].confidence * 100, $gconf := $lgenders[$i].confidence * 100
        return (
         (if ($a) then (
            ($age := $a("value"))[0],
            local:phrase-age($talkings-age)) else "") 
         || " "
         || (if ($g) then (
             ($gender := $g("value"))[0],
             local:phrase($talkings-gender) ) else "")
         || " " 
         || (if ($aconf != $gconf) then  local:phrase-certainty(x"{$aconf}%, {$gconf}%")
            else if ( exists(($aconf, $gconf)) ) then local:phrase-certainty(x"{$aconf}%")
            else "")
       ), ", ")
    };
    (:  variables: $age in years :)
      declare variable $talkings-age-raw := "$age years {old|young{?$age le 25}}";
    (:  variables: $min-age, $max-age, $gender :)
      declare variable $talkings-gender-raw := "
        {{male|man{?$max-age gt 15}|boy{?$min-age lt 20}}{?$gender lt 0}|
         {female|woman{?$max-age gt 15}|girl{?$min-age lt 20}}{?$gender gt 0}}";
    (:  variables: $age in years, $min-age, $max-age, $age-range in years, 
                   $gender, $gender-queer,  :)
    declare variable $talkings-multi-faces-raw := "{{?not($multi-faces)} | 
              {?$multi-faces} 
              {But|Though|However} there are {multiple|many} faces {in the picture.|visible.|.} 
              {That {is|makes it} {quite|very|a little bit|} {confusing|strange|unusual|chaotic}.|} 
              {Which {one|face|of them} should I {pick|choose|look at|examine|analyze}?|} }" ;
    declare variable $talkings := local:create-talkings(
      "{{?not($gender-queer)}{I {see|classify you as} a|You {seem|appear} to be a|You {look|appear} like a} 
       
       |{?$gender-queer} {Hard too say|You {look|appear} {quite} queer|Complicated|Difficult}.
       
         {Tending towards a|{?abs($gender) > 0.6 }{You are most|Most} likely a|Perhaps a|You {might|could} be a}
        
       } 
         {{?$age-range le 10}$age years {old|young{?$min-age le 30}}|
               {?$age-range ge 10}$min-age to $max-age years {old|young{?$min-age le 30}}}

         " || $talkings-gender-raw || "
               
        {{?$gender-queer and abs($gender) le 0.3}. {Or not.|{You can|Can} never be {certain|sure}.|}|}
        
        " || $talkings-multi-faces-raw || "
      ");
      declare variable $talkings-gallery := local:create-talkings("
        {Ah|Nice} {a gallery|an album|many images|a lot of images}. 
        {{My o|The o|O}verall impression is a|
         Altogether {I {see|classify you as} a|you {seem|appear} to be a| you {look|appear} like a} 
        }
        
         {{?$age-range le 10}$age years {old|young{?$min-age le 30}}|
               {?$age-range ge 10}$min-age to $max-age years {old|young{?$min-age le 30}}}
          " || $talkings-gender-raw || "
          .
          
          " || $talkings-multi-faces-raw || "
      ");
      declare variable $talkings-gallery2 := local:create-talkings("
          {{For|On} the individual {pictures|images|photos} {the|my} impression is: }
       ");
      declare variable $talkings-gallery-image := local:create-talkings("
         {{?$age-range le 10}$age years {old|young{?$min-age le 30}}|
               {?$age-range ge 10}$min-age to $max-age years {old|young{?$min-age le 30}}}
          " || $talkings-gender-raw || "
      ");
      declare variable $talkings-age := local:create-talkings($talkings-age-raw);
      declare variable $talkings-gender := local:create-talkings($talkings-gender-raw);      
      declare variable $talkings-certainty := local:create-talkings(
        " { ( $certainty {certainty|probability|} ) |
            ( {p = |probability: |certainty: |confidence: } $certainty ) 
        } ");
      declare variable $talkings-no-help := local:create-talkings("{Sadly |||}I do not know {how {to {get better|improve your|help your} {passing|passing|blending}}}");
      declare variable $talkings-full-disclosure := local:create-talkings("
        I can tell you more precise {{what|who} I am {seeing} in your|how I {gender|see} your} {picture|photo|face}: 
      ");
      declare variable $talkings-no-clue:= local:create-talkings("
        What do you mean?|I have no idea what {you mean|that means}.|
          {I {did|could} not understand|I failed to {parse|understand}} {that|what you mean|what you are saying|your reply}.
      ");
      declare variable $talkings-bot := local:create-talkings("
        {But|Well, |}{I {identify|consider myself|identify myself} as {human|trans-redditor|trans-human}|
         I prefer {trans-redditor|trans-human}|
         I have bot-dysphoria. {Please do|do} not call me that
        }.
      ");
      declare variable $talkings-you-are-welcome := local:create-talkings("
        {You are|You're|Youre} {|very} welcome | Just doing my job 
        | Great that you {enjoyed|liked} it. | Happy to {|be of} help
        | It's my pleasure to {help you|be of help}
      ");
      declare variable $talkings-oxfort-and-sky := local:create-talkings("
        {Oxfort and Skybiometry|Skybiometry and Oxfort} are face {recognization|detection|biometry|} {API|api}s
      ");
      declare variable $talkings-oxfort := local:create-talkings("
        Oxfort is Microsoft's face {recognization|detection|biometry|} api|
        It {is|means|stands for} Microsoft's Oxfort. {A|Some kind of} face {recognization|detection|biometry|} API
      ");
      declare variable $talkings-sky := local:create-talkings("
        Skybiometry is a cloud based face {recognization|detection|biometry|} api|
        Skybiometry {is|means|stands for} a face {recognization|detection|biometry|} API
      ");
      declare variable $paragraph := $line-ending || $line-ending;
      trace(serialize-json($talkings),$line-ending|| " talkings"),
      ()
    </s>
    <s>$active := empty(get('debug-post', ()))</s>
    <call action="tests"/>
 

   <!--<s>age := 60, gender := -1, 
      $curtalkings := local:filter-truths($talkings),
      trace(serialize-json($curtalkings),$line-ending|| " talkings"),
      trace(local:count-talkings($curtalkings), "count"),
      trace(local:choose-talking($curtalkings, 0), "firsr"),
      for $i in (0 to local:count-talkings($curtalkings)) return
        trace(local:choose-talking($curtalkings, $i), $i||"-th"),
      ()
    </s>        -->
    <!-- %certain-age  
    
    
    (between) 10 to 30 years old 
    
   (Probably | Tending towards | Likely | More) male. Not sure | Hard to say 
    -->
    <s>
    </s>
        
    
    <s> ("skybiometry", "oxfort", "reddit", "raw") ! file:create-dir($CACHEDIR || .)</s>

    <if test="empty(get('debug-post', ()))">   
      <page url="https://www.reddit.com/api/login">
        <post name="user" value="{$keys/reddit/user}"/>
        <post name="passwd" value="{$keys/reddit/passwd}"/>
        <post name="api_type" value="json"/>
      </page>    
      <s>modhash := json("https://www.reddit.com/api/me.json")//modhash</s>
    </if>
    
    <loop test="true()">
      <s>letters := json('https://www.reddit.com/message/unread.json')/data/children/data</s>
      <loop var="letter" list="$letters">
        <s>trace($letter, "letter"),
           context := json(resolve-uri((let $context := $letter("context") return
             if (contains($context, "?")) then replace($context, "[?]", ".json?") else concat($context, ".json"))
           ,"http://reddit.com")),
           parentid :=  trace($letter("parent_id"), "parent"), (:fullname:)
           grandparentid := ($context//children)()[trace(concat(.("kind"), "_", .("data")("id")), "id") eq $parentid ]("data")("parent_id"),
           post-cache-file := trace($CACHEDIR || "reddit/" || uri-encode($grandparentid), "cache"),
           
           $sentences := extract(trace($letter/body, "letter body: "), "[^.:;!?]+([.:;!?()-]+|$)", 0, "*") ! (" " || normalize-space(.) || " ")
        </s>
        
        <s>answer := let $thankyou := ($sentences[matches(., "thanks|thank you| ty ")])[1],
                         $oxfort := ($sentences[matches(., "(what|which).*oxfort.*[?]")])[1],
                         $sky := ($sentences[matches(., "(what|which).*sky.*[?]")])[1]
                         $bot := ($sentences[matches(., " bot |not human|automated")])[1] 
                      return 
                        (if (exists($thankyou)) then local:quote($thankyou) || local:phrase($talkings-you-are-welcome) else "") ||
                        (if (exists($bot)) then local:quote($bot) || local:phrase($talkings-bot) else "") ||                      
                        (if (exists($oxfort) and $oxfort = $sky) then 
                          local:quote($oxfort) || local:phrase($talkings-oxfort-and-sky) 
                        else (
                          (if (exists($oxfort)) then local:quote($oxfort) || local:phrase($talkings-oxfort) else "") ||
                          (if (exists($sky)) then local:quote($sky) || local:phrase($talkings-sky) else "") 
                        ))
        </s>
        
        <if test="file:exists($post-cache-file)">
          <!-- if that exists it is a post-->
          <s>linkpost := jn:parse-json(file:read-text($post-cache-file ))</s>
          <call action="detect-linkpost"/>
          <s>answer := $answer || (
            let  $moreinfo := $sentences[matches(., '(what|why|improve|feature|wrong|stand out|problem |help).*[?]')][1]
            return if (exists($moreinfo)) then local:quote($thankyou) || local:phrase($talkings-no-help) else ""
            )
          </s>
          
          <if test="exists( $sentences[contains(., '?') and not (matches(., ' bot |not human|automated'))  ) ">
            <s> $answer := $answer 
                           || (if ($answer ne "") then $paragraph
                               else local:phrase($talkings-no-clue)) || " "
                           || local:phrase($talkings-full-disclosure) </s>
            <if test="count($faces) le 2">
              <loop var="picture" list="$faces">
                <s>local:set-globals($picture),
                   $answer := $answer || " " || join(
                     let $apis := distinct-values( $picture//api ),
                     for $api in $apis
                     return local:full-disclosure-single-api($picture, $api)
                    || " ("||$api||")"
                   ), ", "),
                </s>
              
              </loop>
            </if>
            <else>
              $answer := $answer ||  local:full-disclosure-table($faces)
            </else>
          </if>
          
        </if>
        <s>trace($answer, $line-ending || "fd")</s>
        <if test="$active and ($answer != '')">
          <page url="https://www.reddit.com/api/comment.json">
            <header name="X-Modhash" value="{$modhash}"/>
            <post name="api_type" value="json"/>
            <post name="text" value="{$answer}"/>
            <post name="thing_id" value="{$letter/name}"/>
          </page>
        </if>
      </loop>
      <page test="$active and exists($letters)" url="https://www.reddit.com/api/read_message">
        <header name="X-Modhash" value="{$modhash}"/>
        <post name="id" value="{join($letters/name, ',')}"/>
      </page>        
      <!--    <s>letters := ("/u/butler bring soda")</s>-->
      
   
      
      <loop var="lp" 
            list="json(x'https://www.reddit.com/r/{$keys/reddit/subreddit}/.json?limit=15')/data/children/data">
        <s>linkpost := $lp,
           post-cache-file := $CACHEDIR || "reddit/" || uri-encode(trace($linkpost("name"), "name"))
        </s>
        <if test="not(file:exists($post-cache-file)) or get('debug-post') = $linkpost('name')  ">
          <call action="detect-linkpost"/>
          <if test="count($faces) > 0 ">
            <s>(: Gives us $age and $genders, combine for talking  :) 
   
               if (count($faces) eq 1 ) then (
                 local:set-globals($faces),
                 $message := local:phrase-age($talkings)
               ) else (
                 local:set-globals( {"ages": $faces("ages"), "genders": $faces("genders"), "multi-faces": exists($faces("multi-faces")[.]) } ),
                 $message := local:phrase-age($talkings-gallery) || 
                   if (count(distinct-values($faces("genders")("value"))) != 1 ) then
                 $paragraph ||
                   local:phrase-age($talkings-gallery2) || join (
                   for $face in $faces return (
                     local:set-globals($face)[0], local:phrase-age($talkings-gallery-image)
                   ), ", ") else ""
               ),
   
  
               trace($message, "final message: ")
            </s>
            
            <if test="$active"> 
              <page test="$message" url="https://www.reddit.com/api/comment.json">
                <header name="X-Modhash" value="{$modhash}"/>
                <post name="api_type" value="json"/>
                <post name="text" value="{$message}"/>
                <post name="thing_id" value="{$linkpost('name')}"/>
              </page>
              
              <s>file:write-text($post-cache-file, serialize-json($linkpost)), 
                 file:write-text($post-cache-file || ".message", $message)
              </s>
            </if>
          </if>
        </if>
      </loop>
      <s>sleep(trace(1000*60*5, "sleeping"))</s>
    </loop>
    

  </action>
  
 
  <action id="detect-linkpost">
    <s>post-cache-file := $CACHEDIR || "reddit/" || uri-encode($linkpost("name")),
       $url := $linkpost("url")</s>
    <if test="file:exists($post-cache-file || '.detections')">
       <s>faces := trace(local:json-to-sequence(jn:parse-json(file:read-text($post-cache-file || '.detections'))), "faces")</s>
    </if>
    <else>
      <choose>
        <when test="contains($url, 'imgur.com') and matches($url, '/a/|/gallery/')">
          <page url="https://api.imgur.com/3/album/{extract($url, '/(a|gallery)/(.*)', 2)}">
            <header name="Authorization" value="Client-ID {$keys/imgur/id}"/>
          </page>
          <s>imgurls := jn:parse-json($raw)("data")("images")().link</s>
        </when>
        <when test="matches($url, '[.](jpe?g|png)')">
          <s>imgurls := $url</s>
        </when>
        <when test="contains($url, 'imgur.com')">
          <s>$imgurls := $url || ".jpg"</s>
        </when>
        <otherwise>
          <s>imgurls := ()</s>
        </otherwise>
      </choose>
      
      <s>faces := ()</s>
      <loop var="local-url" list="$imgurls">
        <s>imgurl := $local-url</s>
        <call action="detect"/>
        <s>faces := ($faces, {
          "url": $local-url, 
          "ages": $ages, 
          "genders": $genders, 
          "multi-faces": $multi-faces } )</s>
      </loop>
      <s>file:write-text($post-cache-file || '.detections', serialize-json($faces))</s>
    </else>
  </action>

  <action id="detect">
    <s> genders := (), ages := (), multi-faces := false() </s>
    <s> api := "oxfort" </s> <call action="{$api}"/>
    <s> api := "skybiometry" </s> <call action="{$api}"/>
    <s>trace($genders, "genders: "), trace($ages, "ages: ")</s>
  </action>  
    
  <action id="cache-load">
    <s>cache-file := $CACHEDIR || $api || "/" || uri-encode($imgurl),
       cached := file:exists($cache-file),
       if ($cached) then $response := jn:parse-json(file:read-text($cache-file)) else ()
    </s>    
  </action>
  <action id="cache-save">
    <s> if (not($cached)) then (
      response := jn:parse-json($raw),
      file:write-text($cache-file, serialize-json($response))
    ) else () </s>
  </action>

  <action id="skybiometry"> 
    <call action="cache-load"/>
    <page test="not($cached)"  url="http://api.skybiometry.com/fc/faces/detect.json?api_key={$keys/skybiometry/key}&api_secret={$keys/skybiometry/secret}&urls={uri-encode($imgurl)}&detector=aggressive&attributes=gender,age"/>
    <call action="cache-save"/>

    <s>let $attributes := ($response).photos().tags().attributes
         return (
           $genders[] := ($attributes).gender ! { 
             "value": local:gender-to-number((.).value),
             "confidence": (.).confidence div 100,
             "api": $api
             },
           $ages[] := ($attributes).age_est ! {
             "value": number((.).value),
              "confidence": (.).confidence div 100,
              "api": $api
            }, 
           $multi-faces := $multi-faces or (count($attributes) > 1)
         )
    </s>
  </action>
 
  <action id="oxfort"> 
    <call action="cache-load"/>
    <page test="not($cached)" url="https://api.projectoxford.ai/face/v1.0/detect?returnFaceAttributes=age,gender">
      <header name="Ocp-Apim-Subscription-Key" value="{$keys/oxfort}"/>
      <header>Content-Type: application/json; charset=utf-8</header>
      <header>Accept: application/json</header>
      <method>POST</method>
      <post>{{ "url": "{($imgurl)}" }}</post>
    </page>
    <call action="cache-save"/>
    
    <s>let $attributes := ($response)().faceAttributes
         return (
           $genders[] := ($attributes).gender ! {
               "value": local:gender-to-number(.),
   	           "api": $api
             } ,
           $ages[] := ($attributes).age ! {
               "value": round(.),
   	           "api": $api 
               }, 
           $multi-faces := $multi-faces or (count($attributes) > 1)
         )
    
    </s>
  </action>
 
  
<!--  <action id="lambda">  does not gender, despite saying so in the example
    <page url="https://lambda-face-recognition.p.mashape.com/detect">
      <header name="X-Mashape-Key" value="{trace($keys/mashape, 'key')}"/>
      <header name="Accept" value="application/json"/>
      <post name="urls" value="{$imgurl}"/>
    </page>
    <s>trace($raw, "abc") </s>
  </action>
-->
   <!-- 
  <action id="face++">fails to open imgur links 
    <page url="https://faceplusplus-faceplusplus.p.mashape.com/detection/detect?attribute=gender%2Cage&url={uri-encode($imgurl)}">
      <header name="X-Mashape-Key" value="{trace($keys/mashape, 'key')}"/>
      <header name="Accept" value="application/json"/>
    </page>
  </action>-->
  
  <action id="tests">
     <s>
      testtrue := true(),
      testfalse := false(),
      for $test in ( 
		  ["foobar", "foobar", 1],
		  ["foo|bar", ["foo", "bar"], 2],
		  ["{x}", "x", 1],
		  ["{{x}}", "x", 1],
		  ["a{b}c", {"concat": ["a", "b", "c"]}, 1],
		  ["a{b}c{e}f", {"concat": ["a", "b", "c", "e", "f"]}, 1],
		  ["a{b}c{e|f|g}h", {"concat": ["a", "b", "c", ["e", "f", "g"], "h"]}, 3],
		  ["a{{b}}c", {"concat": ["a", "b", "c"]}, 1], 
		  ["a{b|c}d{e|f}|x", [{"concat": ["a", ["b", "c"], "d", ["e", "f"]]}, "x"], 5],
		  ["a{?$testtrue}", {"concat": "a"}, 1] ,
		  ["b{?$testfalse}|c", ["c"], 1] 
		  ) 
		  let $talk := local:filter-truths(local:create-talkings($test(1)))
  return
    if (serialize-json($talk) ne serialize-json($test(2))) then
      error(QName("xxx"), "test fail: " || $test(1) || " got " || serialize-json($talk))
    else if (local:count-talkings($talk) ne $test(3)) then
      error(QName("xxx"), "count test fail: " || $test(1) || " got " || local:count-talkings($talk))
    else ("ok"),
    
    local:assert(count(local:json-to-sequence(jn:null())) = 0, "null"),
    local:assert(count(local:json-to-sequence([1,2,3])) = 3, "array"),
    local:assert(count(local:json-to-sequence({"a": [1,2,3,4]}).a) = 4, "array"),
    local:assert(count(local:json-to-sequence([{"a": [1,2,3,4]}]).a) = 4, "obj"),
    local:assert(count(local:json-to-sequence([[[{"a": [1,2,3,4]}]]]).a) = 4, "array2"),
    local:assert(count(local:json-to-sequence([[{"x": [{"a": [1,2]}]}]]).x.a) = 2, "array3")
    
    </s>
  </action>
</actions>
