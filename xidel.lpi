<?xml version="1.0"?>
<CONFIG>
  <ProjectOptions>
    <Version Value="9"/>
    <General>
      <Flags>
        <MainUnitHasCreateFormStatements Value="False"/>
        <MainUnitHasTitleStatement Value="False"/>
      </Flags>
      <SessionStorage Value="InProjectDir"/>
      <MainUnit Value="0"/>
      <Title Value="xidel"/>
      <UseXPManifest Value="True"/>
    </General>
    <VersionInfo>
      <Language Value=""/>
      <CharSet Value=""/>
      <StringTable ProductVersion=""/>
    </VersionInfo>
    <BuildModes Count="1">
      <Item1 Name="default" Default="True"/>
    </BuildModes>
    <PublishOptions>
      <Version Value="2"/>
      <IgnoreBinaries Value="False"/>
      <IncludeFileFilter Value="*.(pas|pp|inc|lfm|lpr|lrs|lpi|lpk|sh|xml)"/>
      <ExcludeFileFilter Value="*.(bak|ppu|ppw|o|so);*~;backup"/>
    </PublishOptions>
    <RunParams>
      <local>
        <FormatVersion Value="1"/>
        <CommandLineParams Value="/tmp/test.html -e 'declare function verboseName($n){ concat ( if (contains($n, &quot;win&quot;)) then &quot;Windows: &quot; else if (contains($n, &quot;linux&quot;)) then &quot;Universal Linux: &quot; else if (contains($n, &quot;.deb&quot;)) then &quot;Debian: &quot; else if (contains($n, &quot;src&quot;)) then &quot;Source:&quot; else &quot;&quot;, if (contains($n, &quot;32&quot;)) then &quot;32 Bit&quot; else if (contains($n, &quot;64&quot;))then &quot;64 Bit&quot; else &quot;&quot;  )   };           for $link in match(&lt;TABLE id=&quot;files_list&quot;>&lt;t:loop>&lt;TR class=&quot;file warn&quot;>&lt;TH>&lt;A class=&quot;name&quot;>{{link := object(), link.a := .}}&lt;/A>&lt;/TH>&lt;td/>&lt;td>{{link.size := .}}&lt;/td>&lt;/TR>&lt;/t:loop>&lt;/TABLE>, /) return $link' --extract-kind xquery"/>
        <LaunchingApplication PathPlusParams="/usr/X11R6/bin/xterm -T 'Lazarus Run Output' -e $(LazarusDir)/tools/runwait.sh $(TargetCmdLine)"/>
      </local>
    </RunParams>
    <RequiredPackages Count="1">
      <Item1>
        <PackageName Value="internettools"/>
      </Item1>
    </RequiredPackages>
    <Units Count="2">
      <Unit0>
        <Filename Value="xidel.pas"/>
        <IsPartOfProject Value="True"/>
        <UnitName Value="xidel"/>
      </Unit0>
      <Unit1>
        <Filename Value="xidelbase.pas"/>
        <IsPartOfProject Value="True"/>
        <UnitName Value="xidelbase"/>
      </Unit1>
    </Units>
  </ProjectOptions>
  <CompilerOptions>
    <Version Value="11"/>
    <Target>
      <Filename Value="xidel"/>
    </Target>
    <SearchPaths>
      <IncludeFiles Value="$(ProjOutDir)"/>
      <OtherUnitFiles Value="/home/benito/hg/components/pascal/import/synapse/;/home/benito/hg/components/pascal/import/regexpr/Source/;/home/benito/hg/components/pascal/internet/;/home/benito/hg/components/pascal/import/regexpr/source/"/>
      <UnitOutputDirectory Value="lib/$(TargetCPU)-$(TargetOS)"/>
    </SearchPaths>
    <Parsing>
      <SyntaxOptions>
        <UseAnsiStrings Value="False"/>
      </SyntaxOptions>
    </Parsing>
    <CodeGeneration>
      <Checks>
        <RangeChecks Value="True"/>
        <OverflowChecks Value="True"/>
        <StackChecks Value="True"/>
      </Checks>
    </CodeGeneration>
    <Other>
      <CompilerMessages>
        <UseMsgFile Value="True"/>
      </CompilerMessages>
      <CompilerPath Value="$(CompPath)"/>
    </Other>
  </CompilerOptions>
  <Debugging>
    <Exceptions Count="3">
      <Item1>
        <Name Value="EAbort"/>
      </Item1>
      <Item2>
        <Name Value="ECodetoolError"/>
      </Item2>
      <Item3>
        <Name Value="EFOpenError"/>
      </Item3>
    </Exceptions>
  </Debugging>
</CONFIG>
